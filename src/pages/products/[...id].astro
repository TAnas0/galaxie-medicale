---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";

import { Icon } from "astro-icon/components";

import Card from "../../components/ui/Card.astro";
import Carousel from "../../components/ui/Carousel.jsx";
import CardHeader from "../../components/ui/CardHeader.astro";
import CardTitle from "../../components/ui/CardTitle.astro";
import CardContent from "../../components/ui/CardContent.astro";
import Footer from "../../components/ui/Footer.astro";
import Header1 from "../../components/Header1.astro";

import { getCollection } from "astro:content";

export async function getStaticPaths() {
  // const products = await getCollection("products");
  const products = await getCollection("productsFull");
  return products.map((product) => ({
    params: { id: product.id },
  }));
}

const { params } = Astro;
// const products = await getCollection("products");
const products = await getCollection("productsFull");
let product = products.find((p) => p.id === params.id);

if (!product) {
  throw new Error(`Product not found: ${params.id}`);
}

const CATEGORY_HIGHLIGHTS = {
  sterilisation: [
    "chamber_dimensions",
    "cycle_time",
    "cycle_time_class_b",
    "chamber_capacity",
  ],
  surgery: [
    "intensite_lumineuse",
    "temperature_couleur",
    "cri",
    "diametre_champ",
    "profondeur_eclairage",
    // "nombre_led",
    // "duree_vie",
    // "consommation",
    // "controle",

    "inclinaison_trendelenburg",
    "inclinaison_laterale",
    "glissement_horizontal",
    "charge_maximale",
    "freinage",
  ],
  diagnostic: [
    // "ecran",
    "parametres_vitals",
    "autonomie_batterie",
    // "poids",
    // "interfaces",
    "alarmes",
    // "impression",
    "memoire",
    // "alimentation",
    // "dimensions",
    "modes_patient",
    // "capacite_stockage",
  ],
  medical_furniture: ["roulettes", "dimensions"],
  "dental/chairs": ["weight", "adjustable_height", "tilt_range"],
};
// Function to decide what is highlighted
function applyHighlights(product) {
  const categoryKey = product.data.category?.canonical || "";
  const alwaysHighlight = CATEGORY_HIGHLIGHTS[categoryKey] || [];

  if (product.data.attributes) {
    product.data.attributes.forEach((attr) => {
      // Preserve existing manual highlighted flags
      if (!attr.highlighted && alwaysHighlight.includes(attr.canonical_name)) {
        attr.highlighted = true;
      }
    });
  }

  return product;
}
const highlights = applyHighlights(product).data.attributes.filter(
  (attr) => attr.highlighted
);

const electricalSpecs = product.data.attributes?.filter(
  (attr) => attr.category === "Electrical" && attr.type !== "boolean"
);
product.data.attributes = product.data.attributes?.filter(
  (attr) => !electricalSpecs?.includes(attr)
);
const certifications = product.data.compliance?.certifications;
const standards = product.data.compliance?.standards;

// TODO
const relatedProducts = products
  .filter((p) => p.data.category == product.data.category)
  .slice(0, 3);

// Returns a printable value for a product attribute
function formatAttributeValue(attr) {
  const { value, type } = attr;

  if (value === null || value === undefined) return "";
  if (value.display_value) return value.display_value;

  switch (type) {
    case "number":
      if (value.qty !== undefined) {
        let str = `${value.qty}${value.unit ? " " + value.unit : ""}`;
        if (value.approx) {
          str = str + " (approx.)"
        }
        return str
      }
      return String(value);

    case "integer":
      return `${value}${value.unit ? " " + value.unit : ""}`;

    case "range":
      if (value.min && value.max) {
        return `${value.min}-${value.max}${value.unit ? " " + value.unit : ""}`;
      }
      return JSON.stringify(value);

    case "enum":
      return Array.isArray(value) ? value.join(", ") : String(value);

    default:
      if (value.l && value.h && value.p) {
        return `${value.l} × ${value.h} × ${value.p}${value.unit ? " " + value.unit : ""}`;
      }
      if (value.length && value.height && value.depth) {
        return `${value.length} x ${value.height} x ${value.depth}${value.unit ? " " + value.unit : ""}`;
      }
      if (value.net && value.gross && value.unit) { // Net/Gross weight
        return `Net: ${value.net} ${value.unit} - Brut: ${value.gross} ${value.unit}`;
      }
      if (value.diameter && value.depth && value.unit) {
        return `Ø ${value.diameter} x ${value.depth} ${value.unit} (P)`;
      }
      if (value.length && value.width && value.unit) {
        return `${value.length} x ${value.width} mm (L x l)`
      }
      console.log(value)
      return typeof value === "object" ? JSON.stringify(value) : String(value);

    case "boolean":
      return value ? "Oui" : "Non";

    // default:
    //   return typeof value === "object" ? JSON.stringify(value) : String(value);
  }
}

const HIGHLIGHT_CERTS = ["CE", "ISO 13485", "FDA"];
const HIGHLIGHT_STANDARDS = ["EN 13060", "ISO 14937"];
const highlightedCerts = product.data.compliance?.certifications?.filter(
  (cert) => HIGHLIGHT_CERTS.includes(cert)
);
const highlightedStandards = product.data.compliance?.standards?.filter((std) =>
  HIGHLIGHT_STANDARDS.includes(std)
);
---


<Layout title={product.data.name.fr} description={product.data.short_description.fr}>
  <Header1 />

  <div class="min-h-screen pt-30">
    {/* Main Content */}
    <main class="container mx-auto px-4 py-6">
      {/* Product Hero Section */}
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-6 lg:mb-12">
        {/* Product Information */}
        <div class="space-y-6 flex flex-col">
          <div class="h-full">
            <h1
              class="text-center lg:text-left text-lg md:text-2xl lg:text-3xl font-bold text-gray-900 underline mb-3"
            >
              {product.data.name.fr}
            </h1>
            <div
              class="flex flex-cols gap-2 mb-6 justify-center lg:justify-end -translate-y-1 mb-3"
            >
              {
                product.data.availability == "out_of_stock" && (
                  <div class="w-fit bg-red-600/60 text-white text-xs font-semibold px-2 py-1 rounded shadow">
                    Rupture de stock
                  </div>
                )
              }
              {
                product.data.category.display.fr && (
                  <div class="w-fit bg-primary/60 text-white text-xs font-semibold px-2 py-1 rounded shadow">
                    {product.data.category.display.fr}
                  </div>
                )
              }
              <!-- {(product.data.subcategory) && (
                <div class="w-fit bg-primary/60 text-white text-xs font-semibold px-2 py-1 rounded shadow">
                  {product.data.subcategory}
                </div>
              )} -->
            </div>
            <div class="lg:hidden">
              {
                product.data.images?.length ? (
                  <Carousel images={product.data.images} client:load />
                ) : null
              }
            </div>

            <div
              class="text-lg text-gray-700 whitespace-pre-line leading-[25px] bg-white/50 p-3 h-full"
            >
              {product.data.full_description.fr}
              <!-- {
                product.data.technical_specs["other"]
                  ? product.data.technical_specs["other"].join("\n")
                  : ""
              } -->
              <!-- Highlights -->
              <div>
                <ul class="list-disc list-inside space-y-1 ml-3 mt-6 mb-12">
                  {
                    highlights?.map((highlight, index) => (
                      <li key={index}>
                        <span class="font-semibold">{highlight.display_label.fr}</span>: {formatAttributeValue(highlight)}
                      </li>
                    ))
                  }
                </ul>
              </div>
            </div>
          </div>

          <div class="flex justify-end">
            {
              [...highlightedCerts, ...highlightedStandards]?.map((cert) => (
                <span
                  key={cert}
                  class="inline-block bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded-full mr-1"
                >
                  {cert}
                </span>
              ))
            }
          </div>
          {/* Brand Info */}
          <div
            class="flex items-center justify-center border border-gray-300 w-fit px-3 py-1 rounded-md shadow-md self-end"
          >
            Made by: <span class="font-bold">{product.data.brand.name}</span>
          </div>
        </div>
        {/* Image Carousel */}
        <div class="hidden lg:block">
          {
            product.data.images?.length ? (
              <Carousel images={product.data.images} client:load />
            ) : null
          }
        </div>
      </div>

      {/* Specifications */}
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-2 mb-12">
        <div class="border border-gray-300 rounded-lg bg-white">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center text-gray-900">
                <div class="pr-1 pl-2">
                  <Icon name="heroicons:document" />
                </div>
                Specifications techniques
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {
                product.data.attributes?.map((attribute, index) => (
                  <div class="flex justify-between items-center py-1 border-b border-gray-100 last:border-b-0">
                    <span class="text-sm text-gray-600">
                      {attribute.display_label.fr}
                    </span>
                    <span class="text-sm font-medium text-gray-900 whitespace-pre-line">
                      {formatAttributeValue(attribute)}
                    </span>
                  </div>
                ))
              }
              <!-- {
                specifications.map((spec, index) => (
                  <div
                    key={index}
                    class="flex justify-between items-center py-1 border-b border-gray-100 last:border-b-0"
                  >
                    <span class="text-sm text-gray-600">{spec.label}</span>
                    <span class="text-sm font-medium text-gray-900 whitespace-pre-line">
                      {spec.value}
                    </span>
                  </div>
                ))
              } -->
            </CardContent>
          </Card>
        </div>

        <div class="grid grid-cols-1 gap-2 self-start">
          {
            electricalSpecs?.length ? (
              <Card class="border border-gray-300 rounded-lg bg-white">
                <CardHeader>
                  <CardTitle className="flex items-center text-gray-900">
                    <div class="pr-1 pl-2">
                      <Icon name="heroicons:bolt" />
                    </div>
                    Specifications Electriques
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {electricalSpecs?.map((attribute, index) => (
                    <div class="flex justify-between items-center py-1 border-b border-gray-100 last:border-b-0">
                      <span class="text-sm text-gray-600">
                        {attribute.display_label.fr}
                      </span>
                      <span class="text-sm font-medium text-gray-900 whitespace-pre-line">
                        {formatAttributeValue(attribute)}
                      </span>
                    </div>
                  ))}
                </CardContent>
              </Card>
            ) : null
          }
          {
            [...(certifications ?? []), ...(standards ?? [])].length ? (
              <Card class="border border-gray-300 rounded-lg bg-white">
                <CardHeader>
                  <CardTitle className="flex items-center text-gray-900">
                    <div class="pr-1 pl-2">
                      <Icon name="heroicons:shield-check" />
                    </div>
                    Certifications & Standards
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div>
                    <ul class="list-disc list-inside space-y-1">
                      {[...(certifications ?? []), ...(standards ?? [])].map(
                        (cert, index) => (
                          <li key={index}>
                            <span class="">{cert}</span>
                          </li>
                        )
                      )}
                    </ul>
                  </div>
                </CardContent>
              </Card>
            ) : null
          }

          <!--   
          <Card>
            <CardHeader>
              <CardTitle className="text-gray-900">
                Utilisation prévue & Applications
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h4 class="font-medium text-gray-900 mb-2">
                  Applications principales
                </h4>
                <ul class="space-y-1 text-sm text-gray-700">
                  <li>• Cabinets dentaires et médicaux</li>
                  <li>• Laboratoires et cliniques vétérinaires</li>
                  <li>• Centres de chirurgie ambulatoire</li>
                  <li>• Instituts de beauté et studios de tatouage</li>
                </ul>
              </div>
              <div>
                <h4 class="font-medium text-gray-900 mb-2">
                  Fonctionnalités clés
                </h4>
                <ul class="space-y-1 text-sm text-gray-700">
                  <li>• Cycles de stérilisation classe B (conformes EN 13060)</li>
                  <li>• Système de vide fractionné haute performance</li>
                  <li>
                    • Générateur de vapeur externe rapide avec anti-calcaire
                  </li>
                  <li>• Écran LCD multilingue avec suivi des cycles</li>
                  <li>• Connectivité USB et imprimante en option</li>
                  <li>• Tests automatiques : Bowie-Dick, Helix, Test Vide</li>
                </ul>
              </div>
            </CardContent>
          </Card>
   -->
        </div>
      </div>

      {/* Downloads Section */}
      <!-- <Card class="mb-12">
        <CardHeader>
          <CardTitle className="flex items-center text-gray-900">
            <Icon name="heroicons:arrow-down-tray" />
            Documentation & Resources
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Button
              variant="outline"
              class="h-auto p-4 flex flex-col items-center space-y-2 hover:bg-medical-gray"
            >
              <Icon name="heroicons:document" />
              <span class="font-medium">Product Datasheet</span>
              <span class="text-xs text-gray-500">PDF • 2.4 MB</span>
            </Button>
            <Button
              variant="outline"
              class="h-auto p-4 flex flex-col items-center space-y-2 hover:bg-medical-gray"
            >
              <Icon name="heroicons:document" />
              <span class="font-medium">User Manual</span>
              <span class="text-xs text-gray-500">PDF • 8.1 MB</span>
            </Button>
            <Button
              variant="outline"
              class="h-auto p-4 flex flex-col items-center space-y-2 hover:bg-medical-gray"
            >
              <Icon name="heroicons:document" />
              <span class="font-medium">Service Manual</span>
              <span class="text-xs text-gray-500">PDF • 5.7 MB</span>
            </Button>
            <Button
              variant="outline"
              class="h-auto p-4 flex flex-col items-center space-y-2 hover:bg-medical-gray"
            >
              <Icon name="heroicons:document" />
              <span class="font-medium">Online Training</span>
              <span class="text-xs text-gray-500">External Link</span>
            </Button>
          </div>
        </CardContent>
      </Card> -->

      {/* Related Products */}
      <!-- <div>
        <h2 class="text-2xl font-bold text-gray-900 mb-6">
          Related Products & Accessories
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {
            relatedProducts.map((product, index) => (
              <Card key={index} class="hover:shadow-lg transition-shadow">
                <div class="aspect-[3/2] bg-gray-100 rounded-t-lg overflow-hidden">
                  {/* <img
                    src={Astro.site + product.data.image}
                    alt={product.data.name}
                    class="w-full h-full object-cover"
                  /> */}
                </div>
                <CardContent className="p-4">
                  <h3 class="font-semibold text-gray-900 mb-2">
                    {product.data.name}
                  </h3>
                  {/* <div class="flex items-center justify-between">
                    <Button
                      size="sm"
                      variant="outline"
                      class="text-medical-red border-medical-red hover:bg-medical-red hover:text-white"
                    >
                      View Details
                    </Button>
                  </div> */}
                </CardContent>
              </Card>
            ))
          }
        </div>
      </div> -->
    </main>
  </div>

  <Footer />
</Layout>

<script is:client></script>
