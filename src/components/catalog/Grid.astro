---
import Card from "../ui/Card.astro";
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

let products = await getCollection('products');
// products = [...products, ...products, ...products]
---

<div
  id="product-list"
  class="grid md:grid-cols-3 ltablet:grid-cols-3 lg:grid-cols-3 gap-x-4 ptablet:gap-x-4 gap-y-6 pt-1 mr-2 ml-2 md:ml-0 md:mr-0"
>
  {
    products.map((product) => (
      <div
        x-show={`activeCategory === 'all' || activeCategory === '${product.data.category}'`}
        class="h-full hidden product-item"
      >
        <a href={`/galaxie-medicale/products/${product.id}`} class="block h-full group transition-all duration-300 hover:scale-[1.015]">
  <Card class="group h-full flex flex-col rounded-md border border-gray-300 shadow-xl hover:shadow-3xl transition-all duration-300 ease-in-out overflow-hidden hover:scale-[1.01]">
    
    <!-- Product Image -->
    <div class="relative w-full aspect-[4/3] bg-muted-100 dark:bg-muted-800 min-h-96 pb-20" x-data="{ loaded: false }">
      <!-- Loading indicator -->
      <div
        class="absolute inset-0 flex items-center justify-center animate-pulse bg-muted-300 dark:bg-muted-700"
        x-show="!loaded"
        x-init="$nextTick(() => {
          const img = $refs.img;
          if (img.complete && img.naturalWidth > 0) loaded = true;
        })"
      >
        <div class="loader"></div>
        <!-- Optional Spinner -->
        {/* <svg class="w-6 h-6 text-muted-500 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"/>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"/>
        </svg> */}
      </div>
      <Image
        x-ref="img"
        src={product.data.image2 || "https://placehold.co/400x600"}
        inferSize={true}
        alt={product.data.name}
        loading="lazy"
        class="object-cover w-full h-full transition-opacity duration-700 ease-in-out"
        x-bind:class="loaded ? 'opacity-100 font-normal' : 'opacity-0 font-[0] leading-[0]'"
        x-on:load="loaded = true"
      />
    </div>

    <!-- Product Info -->
    <div class="flex flex-col gap-1 mt-auto">
      {(product.data.availability == "out_of_stock") && (
        <div class="absolute top-2 right-2 bg-red-600/60 text-white text-xs font-semibold px-2 py-1 rounded shadow">
          Rupture de stock
        </div>
      )}

        <!-- Overlay Info -->
        <div class="absolute bottom-0 w-full bg-primary/80 backdrop-blur-sm text-white p-2 transition-opacity duration-300 group-hover:bg-primary">
          <h4 class="text-base font-semibold truncate pb-2">{product.data.name}</h4>
          <p class="text-sm text-muted-600 dark:text-muted-400 line-clamp-3 pb-2">
            {product.data.description}
          </p>
          <div class="flex justify-between items-center">
            <p class="text-xs text-muted-400 italic">{product.data.brand.name}</p>
            <span class="inline-block text-xs font-medium bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 px-2 py-0.5 rounded-md">
              {product.data.category}
            </span>
          
          </div>
        </div>
      </div>
    </Card>
  </a>

      </div>
    ))
  }
</div>


<style>
  /* HTML: <div class="loader"></div> */
  .loader {
    width: 50px;
    --b: 8px; 
    aspect-ratio: 1;
    border-radius: 50%;
    padding: 1px;
    background: conic-gradient(#0000 10%,var(--color-primary)) content-box;
    -webkit-mask:
      repeating-conic-gradient(#0000 0deg,#000 1deg 20deg,#0000 21deg 36deg),
      radial-gradient(farthest-side,#0000 calc(100% - var(--b) - 1px),#000 calc(100% - var(--b)));
    -webkit-mask-composite: destination-in;
            mask-composite: intersect;
    animation:l4 1s infinite steps(10);
  }
  @keyframes l4 {to{transform: rotate(1turn)}}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const allItems = document.querySelectorAll('.product-item');
    let batchSize = 6;
    let currentIndex = 0;

    function showNextBatch() {
      for (let i = 0; i < batchSize && currentIndex < allItems.length; i++, currentIndex++) {
        console.log(`Showing product ${currentIndex}`)
        allItems[currentIndex].classList.remove('hidden');
      }
    }

    showNextBatch();

    window.addEventListener('scroll', () => {
      const bottom = window.innerHeight + window.scrollY >= document.documentElement.scrollHeight;

      if (bottom) {
        console.log(`Scrolled to ${bottom}`)
        showNextBatch();
      }
    });
  });
</script>
