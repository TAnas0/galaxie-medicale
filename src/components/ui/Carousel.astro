---
import { Icon } from "astro-icon/components";
const { images = [] } = Astro.props;
---

<div
  x-data="carouselComponent"
  x-init="init"
  :data-images={JSON.stringify(images)}
  class="space-y-4"
>
  <!-- Main Image -->
  <div class="relative aspect-[4/3] bg-gray-100 rounded-lg overflow-hidden">
    <img
      :src="images[currentImageIndex]"
      alt="Product Image"
      class="w-full h-full object-cover"
    />

    <!-- Arrows -->
    <button
      @click="prevImage"
      class="absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white p-2 rounded-full shadow-md hover:shadow-lg
         transform transition-transform duration-200 ease-in-out
         hover:scale-120
         ring-2 ring-transparent hover:ring-blue-800"
    >
      <Icon name="heroicons:arrow-left" />
    </button>
    <button
      @click="nextImage"
      class="absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white p-2 rounded-full shadow-md hover:shadow-lg
         transform transition-transform duration-200 ease-in-out
         hover:scale-120
         ring-2 ring-transparent hover:ring-blue-800"
    >
      <Icon name="heroicons:arrow-right" />
    </button>
  </div>

  <!-- Thumbnails -->
  <div class="grid grid-cols-4 gap-2">
    <template x-for="(image, index) in images" :key="index">
      <button
        @click="setImage(index)"
        :class="{
          'border-blue-800 scale-105': index === currentImageIndex,
          'border-transparent': index !== currentImageIndex
        }"
        class="aspect-square bg-gray-100 rounded overflow-hidden border-2 transform transition-all duration-400 ease-in-out
             hover:scale-105"
      >
        <img
          :src="image"
          :alt="`Thumbnail ${index + 1}`"
          class="w-full h-full object-cover"
        />
      </button>
    </template>
  </div>
</div>

<!-- Inline Alpine component logic -->
<script is:inline>
  function carouselComponent() {
    return {
      currentImageIndex: 0,
      images: [],
      init() {
        try {
          this.images = JSON.parse(this.$el.dataset.images);
        } catch (e) {
          console.error("Failed to parse images JSON:", e);
        }
      },
      nextImage() {
        this.currentImageIndex =
          (this.currentImageIndex + 1) % this.images.length;
      },
      prevImage() {
        this.currentImageIndex =
          (this.currentImageIndex - 1 + this.images.length) %
          this.images.length;
      },
      setImage(index) {
        this.currentImageIndex = index;
      },
    };
  }
</script>
